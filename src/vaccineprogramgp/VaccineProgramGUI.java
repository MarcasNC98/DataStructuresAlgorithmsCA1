/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vaccineprogramgp;

import com.sun.glass.events.KeyEvent;

/**
 *19.03.2022
 *Mark Cummins
 * x20400634
 */
public class VaccineProgramGUI extends javax.swing.JFrame {

    /**
     * Creates new form VaccineProgramGUI
     */
    private PQInterface newMyPQ;
    StackInterface stkIn;
    //Creates an integer that will display the group number of a vaccine cohort.
    int vacGroup;

    public VaccineProgramGUI() {
        newMyPQ = new MyPriorityQueue();
        stkIn = new MyStack();
        vacGroup = 1;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        exitJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaDisplay = new javax.swing.JTextArea();
        ageJLabel = new javax.swing.JLabel();
        listRegisteredJButton = new javax.swing.JButton();
        vaccinePriorityJButton = new javax.swing.JButton();
        vaccineGroupJButton = new javax.swing.JButton();
        HeaderJLabel = new javax.swing.JLabel();
        fullNameJLabel = new javax.swing.JLabel();
        medicalConditionJLabel = new javax.swing.JLabel();
        numberRegisteredJButton = new javax.swing.JButton();
        addPersonJButton = new javax.swing.JButton();
        nameJText = new javax.swing.JTextField();
        ageJText = new javax.swing.JTextField();
        conditionJText = new javax.swing.JTextField();
        errorMessageJLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        exitJButton.setBackground(new java.awt.Color(255, 102, 102));
        exitJButton.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        exitJButton.setText("EXIT");
        exitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitJButtonActionPerformed(evt);
            }
        });

        jTextAreaDisplay.setColumns(20);
        jTextAreaDisplay.setRows(5);
        jScrollPane1.setViewportView(jTextAreaDisplay);

        ageJLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        ageJLabel.setForeground(java.awt.Color.blue);
        ageJLabel.setText("Age:");

        listRegisteredJButton.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        listRegisteredJButton.setText("List of Registered");
        listRegisteredJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listRegisteredJButtonActionPerformed(evt);
            }
        });

        vaccinePriorityJButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        vaccinePriorityJButton.setText("Sort Priority");
        vaccinePriorityJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vaccinePriorityJButtonActionPerformed(evt);
            }
        });

        vaccineGroupJButton.setBackground(new java.awt.Color(102, 255, 102));
        vaccineGroupJButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        vaccineGroupJButton.setText("Display Next Vaccine Group");
        vaccineGroupJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vaccineGroupJButtonActionPerformed(evt);
            }
        });

        HeaderJLabel.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        HeaderJLabel.setForeground(java.awt.Color.darkGray);
        HeaderJLabel.setText("GP Vaccination Registration Portal");

        fullNameJLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        fullNameJLabel.setForeground(java.awt.Color.blue);
        fullNameJLabel.setText("Full Name: ");

        medicalConditionJLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        medicalConditionJLabel.setForeground(java.awt.Color.blue);
        medicalConditionJLabel.setText("Medical Condition (Y/N):");

        numberRegisteredJButton.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        numberRegisteredJButton.setText("Number Registered");
        numberRegisteredJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberRegisteredJButtonActionPerformed(evt);
            }
        });

        addPersonJButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        addPersonJButton.setText("Add Person");
        addPersonJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPersonJButtonActionPerformed(evt);
            }
        });

        nameJText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameJTextActionPerformed(evt);
            }
        });

        ageJText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageJTextActionPerformed(evt);
            }
        });
        ageJText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ageJTextKeyPressed(evt);
            }
        });

        conditionJText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conditionJTextActionPerformed(evt);
            }
        });
        conditionJText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                conditionJTextKeyPressed(evt);
            }
        });

        errorMessageJLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        errorMessageJLabel.setForeground(new java.awt.Color(255, 51, 51));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(HeaderJLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(79, 79, 79)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(119, 119, 119)
                                                .addComponent(fullNameJLabel))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(medicalConditionJLabel)
                                                .addComponent(ageJLabel)))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(nameJText, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(conditionJText, javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(ageJText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addComponent(errorMessageJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(listRegisteredJButton)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(vaccinePriorityJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(addPersonJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addComponent(numberRegisteredJButton)
                                        .addGap(105, 105, 105))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(291, 291, 291)
                                .addComponent(exitJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(200, 200, 200)
                                .addComponent(vaccineGroupJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 14, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(HeaderJLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fullNameJLabel)
                    .addComponent(nameJText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ageJLabel)
                        .addComponent(ageJText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(errorMessageJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(medicalConditionJLabel)
                    .addComponent(conditionJText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addPersonJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listRegisteredJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numberRegisteredJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(vaccinePriorityJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(vaccineGroupJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(exitJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Button that allows the program to be closed.
    private void exitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitJButtonActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitJButtonActionPerformed

    //Button that will list all of the people registered for a vaccine who haven't been given a priority cohort yet.
    private void listRegisteredJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listRegisteredJButtonActionPerformed
        // TODO add your handling code here:
        jTextAreaDisplay.append("Those who have registered for a vaccine are: " + "\n");
        jTextAreaDisplay.append(stkIn.displayStack() + "\n");
    }//GEN-LAST:event_listRegisteredJButtonActionPerformed

    //Handles what happens when the 'Sort Priority' button is pressed.
    private void vaccinePriorityJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vaccinePriorityJButtonActionPerformed
        // TODO add your handling code here:
        Person p;
        //Integer for setting the priority and an integer for age. I had to set 'Age' in 'Person.java' as a string, so this converts it to an int.
        int priority, age;
        //An integer called size that will equal the initial size of the stack. 
        int size = stkIn.size();
        //A boolean for checking if a person has a medical condition or not.
        boolean condTF;

        for (int i = 0; i < size; i++) {
            //Pop method needs to be used here to actually get the information stored in stack position 0.
            p = (Person) stkIn.pop();
            //Converts the 'Age' string to an integer.
            age = Integer.parseInt(p.getAge());
            //Gets the 'hasCond' boolean that states if a person has a medical condition or not.
            condTF = p.getHasCond();

            //If-else statement that will check if a person is a certain age and if they have a medical condition, will give them a vaccine priority cohort and then add them to the priority queue.
            if (age >= 90) {
                priority = 10;
                newMyPQ.enqueue(priority, p);
            } else if (age >= 80 && age <= 89) {
                priority = 9;
                newMyPQ.enqueue(priority, p);
            } else if (age >= 70 && age <= 79) {
                priority = 8;
                newMyPQ.enqueue(priority, p);
            } else if (age >= 65 && age <= 69) {
                priority = 7;
                newMyPQ.enqueue(priority, p);
            } else if (age >= 18 && age <= 64 && condTF == true) {
                priority = 6;
                newMyPQ.enqueue(priority, p);
            } else if (age >= 55 && age <= 64) {
                priority = 5;
                newMyPQ.enqueue(priority, p);
            } else if (age >= 45 && age <= 54) {
                priority = 4;
                newMyPQ.enqueue(priority, p);
            } else if (age >= 30 && age <= 44) {
                priority = 3;
                newMyPQ.enqueue(priority, p);
            } else if (age >= 18 && age <= 29) {
                priority = 2;
                newMyPQ.enqueue(priority, p);
            } else if (age > 0 && age < 18) {
                priority = 1;
                newMyPQ.enqueue(priority, p);
            }
        }
        //After a person has been added to the priority queue, their info is then displayed in the jTextAreaDisplay window.
        jTextAreaDisplay.append("Vaccine priority cohorts have been created." + "\n" + "\n");

    }//GEN-LAST:event_vaccinePriorityJButtonActionPerformed
    
    //Handles what happens when the 'Display Next Vaccine Group' button is pressed.
    private void vaccineGroupJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vaccineGroupJButtonActionPerformed
        // TODO add your handling code here:
        
        //If there is something in the priority queue.
        if (newMyPQ.size() != 0) {
            //This if-statement will get the info of the first person in the queue and their priority key. This is done outside of the for-loop so I can group people with the same priority key together.
            
            //Will get the deqeue method which will remove the 'first person' a.k.a. the person with the highest priority from the priority queue.
            PQElement linkPQ = (PQElement) newMyPQ.dequeue();
            //Will get the details of the first person in the priority queue.
            Person firstPerson = (Person) linkPQ.getElement();
            //Will get the priority key of the first person in the priority queue and tie it to a variable called priorKey.
            int priorKey = linkPQ.getKey();
            
            //After the priority key of the first person has been found, their vaccine group, priority cohort and details will be displayed.
            jTextAreaDisplay.append("Group Number: " + vacGroup + ", Priority Cohort: " + linkPQ.getKey() + ", Name: " + firstPerson.getName() + ", Age: " + firstPerson.getAge() + ", Medical Condition: " + firstPerson.getHasCond() + "\n");
            
            //Because the first person in the queue has been removed, the 'size' variable in the for-loop needs to be updated with the priority queues new size.
            int size = newMyPQ.size();

            //Checks through the priority queue.
            for (int i = 0; i < size; i++) {
                
                //After the first person has been removed from the priority queue, it now gets the next person with the highest priority.
                PQElement nextInPQ = (PQElement) newMyPQ.nextPerson();
                //Will get the details of this next person in the priority queue.
                Person nextPerson = (Person) nextInPQ.getElement();
                
                //If this persons priority key matches the priority key of the first person removed outside of the loop,
                if (nextInPQ.getKey() == priorKey) {
                    //Then their details will be displayed in the same group as the first person.
                    jTextAreaDisplay.append("Group Number: " + vacGroup + ", Priority Cohort: " + nextInPQ.getKey() + ", Name: " + nextPerson.getName() + ", Age: " + nextPerson.getAge() + ", Medical Condition: " + nextPerson.getHasCond() + "\n");
                    //And they will be removed from the priority queue.
                    newMyPQ.dequeue();
                } else { //If this persons priority key doesn't match with the priority key of the first person removed outstide of the loop,
                    //Then the vaccine group variable is increased by 1, creating a new group,
                    vacGroup++;
                    //And the loop is broken.
                    break;
                    //So now the highest priority people have been removed and displayed in the same group, 
                    //When the GP clicks 'Display Next Vaccine Group' again, the statement will start from line 320, finding the person with the highest priority, getting their key, removing them, checking if anyone else's key matches theirs, and grouping them together,
                    //Until the priority queue has been emptied.
                }
            }
            //Adding some whitespace to make the groups easier to distinguish.
            jTextAreaDisplay.append("\n");
        } else { //If there is nothing in the priority queue, due to the priority not being sorted or everyone being displayed, a message will inform the GP as such.
            jTextAreaDisplay.append("There are no people left in the list/Priority has not been sorted." + "\n" + "\n");
        }
    }//GEN-LAST:event_vaccineGroupJButtonActionPerformed
    
    //Handles what happens when the 'Number Registered' button is pressed.
    private void numberRegisteredJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberRegisteredJButtonActionPerformed
        // TODO add your handling code here:
        //Message that gets the size of the stack and displays it along with a message.
        jTextAreaDisplay.append("There are " + stkIn.size() + " registered for a vaccine." + "\n" + "\n");
    }//GEN-LAST:event_numberRegisteredJButtonActionPerformed
    
    //Handles what happens when the 'Add Person' button is pressed.
    private void addPersonJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPersonJButtonActionPerformed
        // TODO add your handling code here:
        //Creating an error message if there is no info entered. 
        if (nameJText.getText().isEmpty() || ageJText.getText().isEmpty() || conditionJText.getText().isEmpty()) {
            jTextAreaDisplay.append("There cannot be any blank fields." + "\n" + "\n");
        } else {
            //Variables name, age and condTF that will be tied to the variables in 'Person.java' to add their info to the system.
            String name, age;
            boolean condTF;

            //Will get the text entered in the text fields in the GUI and tie them to the variables name, age and condTF.
            Person p = new Person();
            name = nameJText.getText();
            age = ageJText.getText();
            condTF = false;

            //If the GP enters 'Y' in the 'Medical Condition' text field, condTF is set to true.
            if (conditionJText.getText().equalsIgnoreCase("Y")) {
                condTF = true;
                //If the GP enters 'N' in the 'Medical Condition' text field, condTF is set to false.
            } else if (conditionJText.getText().equalsIgnoreCase("N")) {
                condTF = false;
            } else {
                //Asks the GP to enter Y/N.
                jTextAreaDisplay.append("Please enter Y/N" + "\n" + "\n");
            }

            //After the text entered in the text fields in the GUI have been bound to a variable, these variables are then set to those in the 'Person.java' class.
            p.setName(name);
            p.setAge(age);
            p.setHasCond(condTF);

            //The persons details are then pushed to the stack.
            stkIn.push(p);
            jTextAreaDisplay.append("Person has been added." + "\n");

            //The text fields are then emptied so the GP can enter a new person without having to manually remove their info from the text fields.
            nameJText.setText("");
            ageJText.setText("");
            conditionJText.setText("");
        }
    }//GEN-LAST:event_addPersonJButtonActionPerformed

    private void nameJTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameJTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameJTextActionPerformed

    private void ageJTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ageJTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ageJTextActionPerformed

    private void conditionJTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conditionJTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_conditionJTextActionPerformed
    
    //Because my 'Age' variable in 'Person.java' is a String, if the GP entered something other than a number into the age input, it would be accepted and create an error in the system.
    //To stop this, I added a function that only allows a GP to enter a number or backspace in the age field. 
    private void ageJTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ageJTextKeyPressed
        // TODO add your handling code here:
        char a = evt.getKeyChar();
        //If a number or backspace is input, it will be accepted.
        if((a >= '0' && a <= '9') || (a == KeyEvent.VK_BACKSPACE)){
            ageJText.setEditable(true);
        } else {
            //If anything else is entered, it won't be accepted.
            ageJText.setEditable(false);
            errorMessageJLabel.setText("Only numbers can be inputted.");
        }
    }//GEN-LAST:event_ageJTextKeyPressed

    private void conditionJTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_conditionJTextKeyPressed

    }//GEN-LAST:event_conditionJTextKeyPressed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VaccineProgramGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VaccineProgramGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VaccineProgramGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VaccineProgramGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VaccineProgramGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel HeaderJLabel;
    private javax.swing.JButton addPersonJButton;
    private javax.swing.JLabel ageJLabel;
    private javax.swing.JTextField ageJText;
    private javax.swing.JTextField conditionJText;
    private javax.swing.JLabel errorMessageJLabel;
    private javax.swing.JButton exitJButton;
    private javax.swing.JLabel fullNameJLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaDisplay;
    private javax.swing.JButton listRegisteredJButton;
    private javax.swing.JLabel medicalConditionJLabel;
    private javax.swing.JTextField nameJText;
    private javax.swing.JButton numberRegisteredJButton;
    private javax.swing.JButton vaccineGroupJButton;
    private javax.swing.JButton vaccinePriorityJButton;
    // End of variables declaration//GEN-END:variables
}
